/** Generated by YAKINDU Statechart Tools code generator. */

#include "Tictoc.h"

/*! \file Implementation of the state machine 'tictoc'
*/




Tictoc::Tictoc()  :
toggle_raised(false),
tic_raised(false),
toc_raised(false),
count(0),
delay(0),
x(0),
b(false),
i(0.0),
timerService(sc_null),
stateConfVectorPosition(0),
ifaceFoo(sc_null),
isExecuting(false)
{
	this->ifaceFoo.parent = this;
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Tictoc_last_state;
	
	stateConfVectorPosition = 0;
	
	clearInEvents();
	/* Default init sequence for statechart tictoc */
	count = 0;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, count_feature, &count);
	trace(sc::tracing::variable_set, count_feature, &count);
	delay = 5;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, delay_feature, &delay);
	trace(sc::tracing::variable_set, delay_feature, &delay);
	x = 5;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, x_feature, &x);
	trace(sc::tracing::variable_set, x_feature, &x);
	b = false;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, b_feature, &b);
	trace(sc::tracing::variable_set, b_feature, &b);
	ifaceFoo.y = 0;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, Foo_y_feature, &ifaceFoo.y);
	trace(sc::tracing::variable_set, foo_y_feature, &ifaceFoo.y);
	i = 0.0;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, Internal_i_feature, &i);
	trace(sc::tracing::variable_set, internal_i_feature, &i);
	isExecuting = false;
}

Tictoc::~Tictoc()
{
}

Tictoc::Foo::Foo(Tictoc* parent) :
y(0),
parent(parent)
{
}


using namespace tictoc_events;

SctEvent* Tictoc::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

void Tictoc::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return;
	}
	switch(event->name)
	{
		case toggle:
		{
			iface_dispatch_event(event);
			break;
		}
		case tictoc_main_Idle_time_event_0:
		{
			timeEvents[0] = true;
			break;
		}
		case tictoc_main_Playing_time_event_0:
		{
			timeEvents[1] = true;
			break;
		}
		case tictoc_main_Playing_active_Tic_time_event_0:
		{
			timeEvents[2] = true;
			break;
		}
		case tictoc_main_Playing_active_Toc_time_event_0:
		{
			timeEvents[3] = true;
			break;
		}
		default:
			break;
	}
}

void Tictoc::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case toggle:
		{
			internal_raiseToggle();
			break;
		}
		default:
			break;
	}
}
void Tictoc::Foo::dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			break;
	}
}
void Tictoc::internal_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			break;
	}
}

TictocEventName Tictoc::getTimedEventName(sc_eventid evid)
{
	if (evid == (sc_eventid)(&timeEvents[0])) {
		return tictoc_main_Idle_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[1])) {
		return tictoc_main_Playing_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[2])) {
		return tictoc_main_Playing_active_Tic_time_event_0;
	}
	if (evid == (sc_eventid)(&timeEvents[3])) {
		return tictoc_main_Playing_active_Toc_time_event_0;
	}
	return invalid_event;
}



sc_boolean Tictoc::isActive() const
{
	return stateConfVector[0] != Tictoc_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Tictoc::isFinal() const
{
   return false;}

sc_boolean Tictoc::check() {
	if(timerService == sc_null) {
		return false;
	}
	return true;
}


void Tictoc::setTimerService(sc::timer::TimerServiceInterface* timerService)
{
	this->timerService = timerService;
}

sc::timer::TimerServiceInterface* Tictoc::getTimerService()
{
	return timerService;
}

sc_integer Tictoc::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void Tictoc::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		inEventQueue.push_back(new TimedSctEvent(getTimedEventName(evid)));
		runCycle();
	}
}


sc_boolean Tictoc::isStateActive(TictocStates state) const
{
	switch (state)
	{
		case main_Idle : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_IDLE] == main_Idle
			);
		case main_Playing : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_PLAYING] >= main_Playing
				&& stateConfVector[SCVI_MAIN_PLAYING] <= main_Playing_active_Toc);
		case main_Playing_active_Tic : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_PLAYING_ACTIVE_TIC] == main_Playing_active_Tic
			);
		case main_Playing_active_Toc : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_PLAYING_ACTIVE_TOC] == main_Playing_active_Toc
			);
		default: return false;
	}
}

/* Functions for event toggle in interface  */
void Tictoc::raiseToggle()
{
	inEventQueue.push_back(new SctEvent__toggle(toggle));
	runCycle();
}
void Tictoc::internal_raiseToggle()
{
	toggle_raised = true;
}
/* Functions for event tic in interface  */
sc::rx::Observable<void>* Tictoc::getTic()
{
	return &(this->tic_observable);
}
/* Functions for event toc in interface  */
sc::rx::Observable<void>* Tictoc::getToc()
{
	return &(this->toc_observable);
}
sc_integer Tictoc::getCount() const
{
	return count;
}

void Tictoc::setCount(sc_integer value)
{
	this->count = value;
}

sc_integer Tictoc::getDelay() const
{
	return delay;
}

void Tictoc::setDelay(sc_integer value)
{
	this->delay = value;
}

sc_integer Tictoc::getX() const
{
	return x;
}

void Tictoc::setX(sc_integer value)
{
	this->x = value;
}

sc_boolean Tictoc::getB() const
{
	return b;
}

void Tictoc::setB(sc_boolean value)
{
	this->b = value;
}

Tictoc::Foo* Tictoc::foo()
{
	return &ifaceFoo;
}
sc_integer Tictoc::Foo::getY() const
{
	return y;
}

void Tictoc::Foo::setY(sc_integer value)
{
	this->y = value;
}

sc_real Tictoc::getI() const
{
	return i;
}

void Tictoc::setI(sc_real value)
{
	this->i = value;
}


// implementations of all internal functions

/* Entry action for state 'Idle'. */
void Tictoc::enact_main_Idle()
{
	/* Entry action for state 'Idle'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), 50, false);
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_set, 0);
	trace(sc::tracing::time_event_set, 0, sc_null);
	b = true;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, b_feature, &b);
	trace(sc::tracing::variable_set, b_feature, &b);
	i = 42;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, Internal_i_feature, &i);
	trace(sc::tracing::variable_set, internal_i_feature, &i);
}

/* Entry action for state 'Playing'. */
void Tictoc::enact_main_Playing()
{
	/* Entry action for state 'Playing'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[1]), 500, false);
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_set, 1);
	trace(sc::tracing::time_event_set, 1, sc_null);
}

/* Entry action for state 'Tic'. */
void Tictoc::enact_main_Playing_active_Tic()
{
	/* Entry action for state 'Tic'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[2]), delay, false);
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_set, 2);
	trace(sc::tracing::time_event_set, 2, sc_null);
	tic_observable.next();
	tic_raised = true;
}

/* Entry action for state 'Toc'. */
void Tictoc::enact_main_Playing_active_Toc()
{
	/* Entry action for state 'Toc'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[3]), delay, false);
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_set, 3);
	trace(sc::tracing::time_event_set, 3, sc_null);
	toc_observable.next();
	toc_raised = true;
	x += 1;
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, x_feature, &x);
	trace(sc::tracing::variable_set, x_feature, &x);
}

/* Exit action for state 'Idle'. */
void Tictoc::exact_main_Idle()
{
	/* Exit action for state 'Idle'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_unset, 0);
	trace(sc::tracing::time_event_unset, 0, sc_null);
}

/* Exit action for state 'Playing'. */
void Tictoc::exact_main_Playing()
{
	/* Exit action for state 'Playing'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_unset, 1);
	trace(sc::tracing::time_event_unset, 1, sc_null);
}

/* Exit action for state 'Tic'. */
void Tictoc::exact_main_Playing_active_Tic()
{
	/* Exit action for state 'Tic'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_unset, 2);
	trace(sc::tracing::time_event_unset, 2, sc_null);
	count = (count + 1);
	// SC_TRACE_FEATURE(handle, sc_trace_variable_set, count_feature, &count);
	trace(sc::tracing::variable_set, count_feature, &count);
}

/* Exit action for state 'Toc'. */
void Tictoc::exact_main_Playing_active_Toc()
{
	/* Exit action for state 'Toc'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
	// SC_TRACE_TIME_EVENT(handle, sc_trace_time_event_unset, 3);
	trace(sc::tracing::time_event_unset, 3, sc_null);
}

/* 'default' enter sequence for state Idle */
void Tictoc::enseq_main_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	enact_main_Idle();
	trace(sc::tracing::state_entered, main_Idle, sc_null);
	stateConfVector[0] = main_Idle;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Playing */
void Tictoc::enseq_main_Playing_default()
{
	/* 'default' enter sequence for state Playing */
	enact_main_Playing();
	trace(sc::tracing::state_entered, main_Playing, sc_null);
	enseq_main_Playing_active_default();
}

/* 'default' enter sequence for state Tic */
void Tictoc::enseq_main_Playing_active_Tic_default()
{
	/* 'default' enter sequence for state Tic */
	enact_main_Playing_active_Tic();
	trace(sc::tracing::state_entered, main_Playing_active_Tic, sc_null);
	stateConfVector[0] = main_Playing_active_Tic;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Toc */
void Tictoc::enseq_main_Playing_active_Toc_default()
{
	/* 'default' enter sequence for state Toc */
	enact_main_Playing_active_Toc();
	trace(sc::tracing::state_entered, main_Playing_active_Toc, sc_null);
	stateConfVector[0] = main_Playing_active_Toc;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region main */
void Tictoc::enseq_main_default()
{
	/* 'default' enter sequence for region main */
	react_main__entry_Default();
}

/* 'default' enter sequence for region active */
void Tictoc::enseq_main_Playing_active_default()
{
	/* 'default' enter sequence for region active */
	react_main_Playing_active__entry_Default();
}

/* Default exit sequence for state Idle */
void Tictoc::exseq_main_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[0] = Tictoc_last_state;
	stateConfVectorPosition = 0;
	exact_main_Idle();
	trace(sc::tracing::state_exited, main_Idle, sc_null);
}

/* Default exit sequence for state Playing */
void Tictoc::exseq_main_Playing()
{
	/* Default exit sequence for state Playing */
	exseq_main_Playing_active();
	exact_main_Playing();
	trace(sc::tracing::state_exited, main_Playing, sc_null);
}

/* Default exit sequence for state Tic */
void Tictoc::exseq_main_Playing_active_Tic()
{
	/* Default exit sequence for state Tic */
	stateConfVector[0] = Tictoc_last_state;
	stateConfVectorPosition = 0;
	exact_main_Playing_active_Tic();
	trace(sc::tracing::state_exited, main_Playing_active_Tic, sc_null);
}

/* Default exit sequence for state Toc */
void Tictoc::exseq_main_Playing_active_Toc()
{
	/* Default exit sequence for state Toc */
	stateConfVector[0] = Tictoc_last_state;
	stateConfVectorPosition = 0;
	exact_main_Playing_active_Toc();
	trace(sc::tracing::state_exited, main_Playing_active_Toc, sc_null);
}

/* Default exit sequence for region main */
void Tictoc::exseq_main()
{
	/* Default exit sequence for region main */
	/* Handle exit of all possible states (of tictoc.main) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_Idle :
		{
			exseq_main_Idle();
			break;
		}
		case main_Playing_active_Tic :
		{
			exseq_main_Playing_active_Tic();
			exact_main_Playing();
			trace(sc::tracing::state_exited, main_Playing, sc_null);
			break;
		}
		case main_Playing_active_Toc :
		{
			exseq_main_Playing_active_Toc();
			exact_main_Playing();
			trace(sc::tracing::state_exited, main_Playing, sc_null);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region active */
void Tictoc::exseq_main_Playing_active()
{
	/* Default exit sequence for region active */
	/* Handle exit of all possible states (of tictoc.main.Playing.active) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_Playing_active_Tic :
		{
			exseq_main_Playing_active_Tic();
			break;
		}
		case main_Playing_active_Toc :
		{
			exseq_main_Playing_active_Toc();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void Tictoc::react_main__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_Idle_default();
}

/* Default react sequence for initial entry  */
void Tictoc::react_main_Playing_active__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_Playing_active_Tic_default();
}

sc_boolean Tictoc::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean Tictoc::main_Idle_react(const sc_boolean try_transition) {
	/* The reactions of state Idle. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((toggle_raised) || (timeEvents[0]))
		{ 
			exseq_main_Idle();
			enseq_main_Playing_default();
			react();
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = react();
	} 
	return did_transition;
}

sc_boolean Tictoc::main_Playing_react(const sc_boolean try_transition) {
	/* The reactions of state Playing. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((toggle_raised) || (timeEvents[1]))
		{ 
			exseq_main_Playing();
			enseq_main_Idle_default();
			react();
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = react();
	} 
	return did_transition;
}

sc_boolean Tictoc::main_Playing_active_Tic_react(const sc_boolean try_transition) {
	/* The reactions of state Tic. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (timeEvents[2])
		{ 
			exseq_main_Playing_active_Tic();
			enseq_main_Playing_active_Toc_default();
			main_Playing_react(false);
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = main_Playing_react(try_transition);
	} 
	return did_transition;
}

sc_boolean Tictoc::main_Playing_active_Toc_react(const sc_boolean try_transition) {
	/* The reactions of state Toc. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if (timeEvents[3])
		{ 
			exseq_main_Playing_active_Toc();
			enseq_main_Playing_active_Tic_default();
			main_Playing_react(false);
		}  else
		{
			did_transition = false;
		}
	} 
	if ((did_transition) == (false))
	{ 
		did_transition = main_Playing_react(try_transition);
	} 
	return did_transition;
}

void Tictoc::clearInEvents() {
	toggle_raised = false;
	timeEvents[0] = false;
	timeEvents[1] = false;
	timeEvents[2] = false;
	timeEvents[3] = false;
}

void Tictoc::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	// SC_TRACE(handle, sc_trace_machine_enter);
	trace(sc::tracing::machine_enter, no_feature, sc_null);

	/* Default enter sequence for statechart tictoc */
	enseq_main_default();
	isExecuting = false;
}

void Tictoc::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	// SC_TRACE(handle, sc_trace_machine_exit);
	trace(sc::tracing::machine_exit, no_feature, sc_null);

	/* Default exit sequence for statechart tictoc */
	exseq_main();
	isExecuting = false;
}

void Tictoc::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	// SC_TRACE(handle, sc_trace_machine_run_cycle_start);
	trace(sc::tracing::machine_run_cycle_start, no_feature, sc_null);

	dispatch_event(getNextEvent());
	do
	{ 
		for (stateConfVectorPosition = 0;
			stateConfVectorPosition < maxOrthogonalStates;
			stateConfVectorPosition++)
			{
				
			switch (stateConfVector[stateConfVectorPosition])
			{
			case main_Idle :
			{
				main_Idle_react(true);
				break;
			}
			case main_Playing_active_Tic :
			{
				main_Playing_active_Tic_react(true);
				break;
			}
			case main_Playing_active_Toc :
			{
				main_Playing_active_Toc_react(true);
				break;
			}
			default:
				break;
			}
		}
		clearInEvents();
		dispatch_event(getNextEvent());
	} while (((((toggle_raised) || (timeEvents[0])) || (timeEvents[1])) || (timeEvents[2])) || (timeEvents[3]));
	// SC_TRACE(handle, sc_trace_machine_run_cycle_end);
	trace(sc::tracing::machine_run_cycle_end, no_feature, sc_null);

	isExecuting = false;
}

void Tictoc::trace(sc::tracing::TraceEventType type, sc_integer id, const void* value) {
	sc::tracing::TraceEvent event(type, this, id, value);
	trace_observable.next(event);
}

/*! Gets the observable for generic trace events. Trace observers can subscribe. */
sc::rx::Observable<sc::tracing::TraceEvent>* Tictoc::getTrace() {
	return &(this->trace_observable);
}
