/** Generated by YAKINDU Statechart Tools code generator. */
package light;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class LightSwitch implements IStatemachine, ITimed {
	public static class User {
		private LightSwitch parent;
		
		public User(LightSwitch parent) {
			this.parent = parent;
		}
		private boolean on_button;
		
		
		public void raiseOn_button() {
			parent.inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					on_button = true;
				}
			});
			parent.runCycle();
		}
		
		private boolean off_button;
		
		
		public void raiseOff_button() {
			parent.inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					off_button = true;
				}
			});
			parent.runCycle();
		}
		
	}
	
	public static class Light {
		public interface OperationCallback {
		
			public long computeMaxBrightness();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean on;
		
		
		protected void raiseOn() {
			on = true;
		}
		public boolean isRaisedOn() {
			return on;
		}
		
		
		private boolean off;
		
		
		protected void raiseOff() {
			off = true;
		}
		public boolean isRaisedOff() {
			return off;
		}
		
		
		private long brightness;
		
		public long getBrightness() {
			return brightness;
		}
		
		public void setBrightness(long value) {
			this.brightness = value;
		}
		
	}
	
	protected User user;
	
	protected Light light;
	
	public enum State {
		MAIN_REGION_OFF,
		MAIN_REGION_ON,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public LightSwitch() {
		user = new User(this);
		light = new Light();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearOutEvents();
		
		light.setBrightness(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.light.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Light must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearOutEvents() {
		light.on = false;
		light.off = false;
	}
	
	private void clearInEvents() {
		user.on_button = false;
		user.off_button = false;
		timeEvents[0] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.light.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Light must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_REGION_OFF:
					main_region_Off_react(true);
					break;
				case MAIN_REGION_ON:
					main_region_On_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while (((user.on_button || user.off_button) || timeEvents[0]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_OFF:
			return stateVector[0] == State.MAIN_REGION_OFF;
		case MAIN_REGION_ON:
			return stateVector[0] == State.MAIN_REGION_ON;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public User user() {
		return user;
	}
	
	public Light light() {
		return light;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_region_Off() {
		light.setBrightness(0);
		
		light.raiseOff();
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_main_region_On() {
		timerService.setTimer(this, 0, (30 * 1000), false);
		
		light.raiseOn();
	}
	
	/* Exit action for state 'On'. */
	private void exitAction_main_region_On() {
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_Off_default() {
		entryAction_main_region_Off();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_OFF;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_On_default() {
		entryAction_main_region_On();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_ON;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_On() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_On();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			exitSequence_main_region_Off();
			break;
		case MAIN_REGION_ON:
			exitSequence_main_region_On();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (user.on_button) {
					exitSequence_main_region_Off();
					light.setBrightness(1);
					
					enterSequence_main_region_On_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_On_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if ((user.off_button || timeEvents[0])) {
					exitSequence_main_region_On();
					enterSequence_main_region_Off_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			if (((user.on_button) && (light.getBrightness()<light.operationCallback.computeMaxBrightness()))) {
				light.setBrightness(light.getBrightness() + 1);
			}
		}
		return did_transition;
	}
	
}
